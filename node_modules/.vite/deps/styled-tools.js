import "./chunk-YBOLLQGG.js";

// node_modules/styled-tools/dist/es/prop.js
var prop = function prop2(path, defaultValue) {
  return function() {
    var props = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
    if (typeof props[path] !== "undefined") {
      return props[path];
    }
    if (path && path.indexOf(".") > 0) {
      var paths = path.split(".");
      var length = paths.length;
      var object = props[paths[0]];
      var index = 1;
      while (object != null && index < length) {
        object = object[paths[index]];
        index += 1;
      }
      if (typeof object !== "undefined") {
        return object;
      }
    }
    return defaultValue;
  };
};
var prop_default = prop;

// node_modules/styled-tools/dist/es/ifProp.js
function _typeof(obj) {
  if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
    _typeof = function _typeof2(obj2) {
      return typeof obj2;
    };
  } else {
    _typeof = function _typeof2(obj2) {
      return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
    };
  }
  return _typeof(obj);
}
var parseFunction = function parseFunction2(props, test) {
  return Boolean(test(props));
};
var parseObject = function parseObject2(props, test) {
  var keys = Object.keys(test);
  var length = keys.length;
  for (var index = 0; index < length; index += 1) {
    var key = keys[index];
    var expected = test[key];
    var value = prop_default(key)(props);
    if (expected !== value) {
      return false;
    }
  }
  return true;
};
var parseString = function parseString2(props, test) {
  return Boolean(prop_default(test)(props));
};
var parseMap = {
  function: parseFunction,
  object: parseObject,
  string: parseString
};
var ifProp = function ifProp2(test) {
  var pass = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : "";
  var fail = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : "";
  return function() {
    var props = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
    var result = true;
    if (Array.isArray(test)) {
      var length = test.length;
      var index = 0;
      while (result && index < length) {
        result = parseMap[_typeof(test[index])](props, test[index]);
        index += 1;
      }
    } else {
      result = parseMap[_typeof(test)](props, test);
    }
    var value = result ? pass : fail;
    return typeof value === "function" ? value(props) : value;
  };
};
var ifProp_default = ifProp;

// node_modules/styled-tools/dist/es/ifNotProp.js
var ifNotProp = function ifNotProp2(test, pass, fail) {
  return ifProp_default(test, fail, pass);
};
var ifNotProp_default = ifNotProp;

// node_modules/styled-tools/dist/es/palette.js
var toArray = function toArray2(arg) {
  return Array.isArray(arg) ? arg : [arg];
};
var clamp = function clamp2(number, min, max) {
  if (number < min)
    return min;
  if (number > max)
    return max;
  return number;
};
var palette = function palette2(keyOrTone, toneOrDefaultValue, defaultValue) {
  return function(props) {
    var key = typeof keyOrTone === "string" ? keyOrTone : props.palette;
    var tone = typeof keyOrTone === "number" ? keyOrTone : typeof toneOrDefaultValue === "number" ? toneOrDefaultValue : props.tone || 0;
    var finalDefaultValue = toneOrDefaultValue !== tone ? toneOrDefaultValue : defaultValue;
    if (!props.theme.palette || !props.theme.palette[key]) {
      return finalDefaultValue;
    }
    var tones = toArray(props.theme.palette[key]);
    if (tone < 0) {
      return tones[clamp(tones.length + tone, 0, tones.length - 1)];
    }
    return tones[clamp(tone, 0, tones.length - 1)];
  };
};
var palette_default = palette;

// node_modules/styled-tools/dist/es/switchProp.js
var switchProp = function switchProp2(needle, cases, defaultCase) {
  return function() {
    var props = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
    var value = typeof needle === "function" ? needle(props) : prop_default(needle)(props);
    var finalCases = typeof cases === "function" ? cases(props) : cases;
    if (value in finalCases) {
      return finalCases[value];
    }
    return defaultCase;
  };
};
var switchProp_default = switchProp;

// node_modules/styled-tools/dist/es/theme.js
var theme = function theme2(path, defaultValue) {
  return function(props) {
    return prop_default(path, defaultValue)(props.theme);
  };
};
var theme_default = theme;

// node_modules/styled-tools/dist/es/withProp.js
function _toConsumableArray(arr) {
  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread();
}
function _nonIterableSpread() {
  throw new TypeError("Invalid attempt to spread non-iterable instance");
}
function _iterableToArray(iter) {
  if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]")
    return Array.from(iter);
}
function _arrayWithoutHoles(arr) {
  if (Array.isArray(arr)) {
    for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) {
      arr2[i] = arr[i];
    }
    return arr2;
  }
}
var withProp = function withProp2(needle, fn) {
  return function() {
    var props = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
    if (Array.isArray(needle)) {
      var needles = needle.map(function(arg) {
        return withProp2(arg, function(x) {
          return x;
        })(props);
      });
      return fn.apply(void 0, _toConsumableArray(needles));
    }
    if (typeof needle === "function") {
      return fn(needle(props));
    }
    return fn(prop_default(needle)(props));
  };
};
var withProp_default = withProp;
export {
  ifNotProp_default as ifNotProp,
  ifProp_default as ifProp,
  palette_default as palette,
  prop_default as prop,
  switchProp_default as switchProp,
  theme_default as theme,
  withProp_default as withProp
};
//# sourceMappingURL=styled-tools.js.map
