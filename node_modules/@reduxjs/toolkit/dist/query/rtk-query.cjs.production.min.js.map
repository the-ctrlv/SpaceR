{"version":3,"names":["QueryStatus","QueryStatus2","__markAsModule","exports","__export","buildCreateApi","copyWithStructuralSharing","coreModule","createApi","defaultSerializeQueryArgs","fakeBaseQuery","fetchBaseQuery","retry","setupListeners","skipSelector","skipToken","flatten","arr","concat","apply","isPlainObject","__toModule","require","oldObj","newObj","Array","isArray","newKeys","Object","keys","oldKeys","isSameObject","length","mergeObj","_j","newKeys_1","key","import_toolkit2","defaultFetchFn","args","arguments","fetch","defaultValidateStatus","response","status","defaultIsJsonContentType","headers","test","get","stripUndefined","obj","copy","__spreadValues","_k","entries","_l","_a","_this","this","baseUrl","prepareHeaders","x","fetchFn","paramsSerializer","isJsonContentType","_m","jsonContentType","jsonReplacer","defaultTimeout","timeout","globalResponseHandler","responseHandler","globalValidateStatus","validateStatus","baseFetchOptions","__objRest","console","warn","arg","api","__async","signal","getState","extra","endpoint","forced","type","url","_a2","Headers","params","_o","rest","config","__spreadProps","_p","_q","sent","isJsonifiable","body","toJSON","has","set","JSON","stringify","divider","indexOf","query","URLSearchParams","base","RegExp","isAbsoluteUrl","delimiter","endsWith","startsWith","replace","withoutTrailingSlash","withoutLeadingSlash","joinUrls","request","Request","requestClone","clone","meta","timedOut","timeoutId","setTimeout","abort","error","String","e_1","clearTimeout","responseClone","responseText","Promise","all","handleResponse","then","r","resultData","e","handleResponseError_1","text","originalStatus","data","e_2","parse","HandledError","value","defaultBackoff","attempt","maxRetries","attempts","Math","min","random","resolve","res","EMPTY_OPTIONS","assign","baseQuery","defaultOptions","extraOptions","possibleMaxRetries","filter","slice","defaultRetryCondition","_","__","options","backoff","retryCondition","retry2","result","e_3","throwImmediately","baseQueryApi","fail","import_toolkit3","onFocus","createAction","onFocusLost","onOnline","onOffline","initialized","dispatch","customHandler","handleFocus","handleOnline","handleOffline","handleVisibilityChange","window","document","visibilityState","addEventListener","removeEventListener","DefinitionType","DefinitionType2","import_toolkit7","isQueryDefinition","calculateProvidedBy","description","queryArg","assertTagTypes","map","expandTagDescription","import_toolkit6","isNotNullish","v","forceQueryFnSymbol","Symbol","isUpsertQuery","import_toolkit4","import_immer","import_toolkit5","defaultTransformResponse","baseQueryReturnValue","calculateProvidedByThunk","action","endpointDefinitions","assertTagType","endpointName","isFulfilled","payload","isRejectedWithValue","originalArgs","baseQueryMeta","import_immer2","import_immer3","updateQuerySubstateIfExists","state","queryCacheKey","update","substate","getMutationCacheKey","id","fixedCacheKey","requestId","updateMutationSubstateIfExists","initialState","for","initialSubState","uninitialized","defaultQuerySubState","createNextState","defaultMutationSubState","import_toolkit8","cache","WeakMap","queryArgs","serialized","cached","stringified","sort","reduce","acc","key2","import_toolkit9","import_reselect","modules","extractRehydrationInfo","defaultMemoize","_b","call","reducerPath","optionsWithDefaults","keepUnusedDataFor","refetchOnMountOrArgChange","refetchOnFocus","refetchOnReconnect","serializeQueryArgs","queryArgsApi","finalSerializeQueryArgs","endpointDefinition","endpointSQA_1","queryArgsApi2","initialResult","tagTypes","__spreadArray","context","batch","fn","apiUid","nanoid","hasRehydrationInfo","injectEndpoints","inject","evaluatedEndpoints","endpoints","mutation","definition","overrideExisting","initializedModules_1","initializedModules","injectEndpoint","enhanceEndpoints","addTagTypes","addTagTypes_1","eT","includes","push","partialDefinition","m","init","Error","promise","import_toolkit13","buildCacheCollectionHandler","internalState","internalActions","removeQueryResult","unsubscribeQueryResult","anySubscriptionsRemainingForKey","subscriptions","currentSubscriptions","k","isObjectEmpty","currentRemovalTimeouts","handleUnsubscribe","api2","Infinity","finalKeepUnusedDataFor","max","currentTimeout","mwApi","internalState2","match","queries","util","resetApiState","queryState","import_toolkit10","buildInvalidationByTagsHandler","mutationThunk","refetchQuery","isThunkActionWithTags","isAnyOf","invalidateTags","tags","rootState","toInvalidate","selectInvalidatedBy","valuesArray_1","from","values","querySubState","subscriptionSubState","buildPollingHandler","queryThunk","currentPolls","startNextPoll","lowestPollingInterval","findLowestPollingInterval","Number","isFinite","currentPoll","nextPollTimestamp","Date","now","currentInterval","pollingInterval","updatePollingInterval","cleanupPollForKey","existingPoll","subscribers","POSITIVE_INFINITY","updateSubscriptionOptions","pending","rejected","condition","fulfilled","clearPolls","import_toolkit11","neverResolvedError","buildCacheLifecycleHandler","isQueryThunk","isAsyncThunkAction","isMutationThunk","isFulfilledThunk","lifecycleMap","handleNewKey","onCacheEntryAdded","lifecycle","cacheEntryRemoved","cacheDataLoaded","race","valueResolved","catch","selector","select","extra2","lifecycleApi","getCacheEntry","updateCachedData","updateRecipe","updateQueryData","runningHandler","stateBefore","cacheKey","removeMutationResult","getCacheKey","oldState","mutations","import_toolkit12","buildQueryLifecycleHandler","isPendingThunk","isPending","isRejectedThunk","isRejected","isFullfilledThunk","_c","endpointName_1","originalArgs_1","onQueryStarted","lifecycle_1","queryFulfilled","reject","selector_1","isUnhandledError","rejectedWithValue","buildDevCheckHandler","middlewareRegistered","import_immer4","queueMicrotaskShim","queueMicrotask","bind","global","globalThis","cb","err","safeAssign","target","import_immer5","coreModuleName","name","enablePatches","tag","executeEndpoint","_0","_1","rejectWithValue","fulfillWithValue","transformResponse","baseQueryApi_1","isForcedQuery","forceQueryFn","_r","queryFn","arg2","fulfilledTimeStamp","SHOULD_AUTOBATCH","catchedError","error_1","transformErrorResponse","e_4","_d","requestState","baseFetchOnMountOrArgChange","fulfilledVal","refetchVal","forceRefetch","subscribe","createAsyncThunk","getPendingMeta","startedTimeStamp","queryThunkArgs","currentArg","previousArg","endpointState","dispatchConditionRejection","matchesEndpoint","prefetch","force","hasTheForce","maxAge","hasMaxAge","ifOlderThan","queryAction","force2","initiate","latestStateValue","lastFulfilledTs","currentState","ret","patches","inversePatches","undo","patchQueryData","isDraftable","produceWithPatches","op","path","upsertQueryData","queryResultPatched","buildMatchThunkActions","thunk","matchPending","isAllOf","matchFulfilled","matchRejected","buildThunks","definitions","querySlice","createSlice","reducers","reducer","draft","prepare","prepareAutoBatched","applyPatches","extraReducers","builder","addCase","upserting","merge","fulfilledTimeStamp_1","arg_1","baseQueryMeta_1","requestId_1","newData","draftSubstateData","structuralSharing","isDraft","original","addMatcher","entry","mutationSlice","track","invalidationSlice","actions","idSubscriptions","foundAt","splice","provided","cacheKeys","subscribedQueries","cacheKeys_1","providedTags","providedTags_1","subscriptionSlice","d","a","internal_probeSubscription","internalSubscriptionsSlice","subscriptionsUpdated","configSlice","online","navigator","onLine","focused","combinedReducer","combineReducers","unsubscribeMutationResult","buildSlice","sliceActions","input","handlerBuilders","middleware","initialized2","builderArgs","handlers","build","batchedActionsHandler","subscriptionsPrefix","previousSubscriptions","dispatchQueued","didMutate","mutableState","_e","_f","_g","_h","_i","subscriptionOptions","actuallyMutateSubscriptions","newSubscriptions","next","isSubscriptionSliceAction","isAdditionalSubscriptionAction","buildBatchedActionsHandler","windowEventsHandler","refetchValidQueries","some","sub","every","buildWindowEventHandler","mwApiWithNext","hasSubscription","isThisApiSliceAction","handlers_1","handler","override","buildMiddleware","selectSkippedQuery","selectSkippedMutation","buildQuerySelector","serializedArgs","createSelector","selectInternalState","withRequestFlags","buildMutationSelector","mutationId","apiState","Set","invalidateSubscriptions_1","add","isUninitialized","isLoading","isSuccess","isError","buildSelectors","runningQueries","Map","runningMutations","buildInitiateQuery","thunkResult","stateAfter","skippedSynchronously","runningQuery","selectFromState","statePromise","unwrap","refetch","unsubscribe","running_1","delete","buildInitiateMutation","returnValuePromise","reset","running","getRunningQueryThunk","getRunningMutationThunk","_endpointName","fixedCacheKeyOrRequestId","getRunningQueriesThunk","getRunningMutationsThunk","getRunningOperationPromises","extract","flatMap","queriesForStore","removalWarning","buildInitiate","getRunningOperationPromise","anyApi"],"sources":["../../src/query/core/apiState.ts","../../src/query/index.ts","../../src/query/utils/flatten.ts","../../src/query/utils/copyWithStructuralSharing.ts","../../src/query/fetchBaseQuery.ts","../../src/query/utils/joinUrls.ts","../../src/query/utils/isAbsoluteUrl.ts","../../src/query/HandledError.ts","../../src/query/retry.ts","../../src/query/core/setupListeners.ts","../../src/query/core/buildSelectors.ts","../../src/query/endpointDefinitions.ts","../../src/query/core/buildSlice.ts","../../src/query/utils/isNotNullish.ts","../../src/query/core/buildInitiate.ts","../../src/query/core/buildThunks.ts","../../src/query/defaultSerializeQueryArgs.ts","../../src/query/createApi.ts","../../src/query/fakeBaseQuery.ts","../../src/query/core/buildMiddleware/index.ts","../../src/query/core/buildMiddleware/batchActions.ts","../../src/query/core/buildMiddleware/cacheCollection.ts","../../src/query/core/buildMiddleware/invalidationByTags.ts","../../src/query/core/buildMiddleware/polling.ts","../../src/query/core/buildMiddleware/cacheLifecycle.ts","../../src/query/core/buildMiddleware/queryLifecycle.ts","../../src/query/core/buildMiddleware/devMiddleware.ts","../../src/query/tsHelpers.ts","../../src/query/core/module.ts","../../src/query/utils/isOnline.ts","../../src/query/utils/isDocumentVisible.ts","../../src/query/core/buildMiddleware/windowEventHandling.ts","../../src/query/core/index.ts"],"sourcesContent":["import type { SerializedError } from '@reduxjs/toolkit'\r\nimport type { BaseQueryError } from '../baseQueryTypes'\r\nimport type {\r\n  QueryDefinition,\r\n  MutationDefinition,\r\n  EndpointDefinitions,\r\n  BaseEndpointDefinition,\r\n  ResultTypeFrom,\r\n  QueryArgFrom,\r\n} from '../endpointDefinitions'\r\nimport type { Id, WithRequiredProp } from '../tsHelpers'\r\n\r\nexport type QueryCacheKey = string & { _type: 'queryCacheKey' }\r\nexport type QuerySubstateIdentifier = { queryCacheKey: QueryCacheKey }\r\nexport type MutationSubstateIdentifier =\r\n  | {\r\n      requestId: string\r\n      fixedCacheKey?: string\r\n    }\r\n  | {\r\n      requestId?: string\r\n      fixedCacheKey: string\r\n    }\r\n\r\nexport type RefetchConfigOptions = {\r\n  refetchOnMountOrArgChange: boolean | number\r\n  refetchOnReconnect: boolean\r\n  refetchOnFocus: boolean\r\n}\r\n\r\n/**\r\n * Strings describing the query state at any given time.\r\n */\r\nexport enum QueryStatus {\r\n  uninitialized = 'uninitialized',\r\n  pending = 'pending',\r\n  fulfilled = 'fulfilled',\r\n  rejected = 'rejected',\r\n}\r\n\r\nexport type RequestStatusFlags =\r\n  | {\r\n      status: QueryStatus.uninitialized\r\n      isUninitialized: true\r\n      isLoading: false\r\n      isSuccess: false\r\n      isError: false\r\n    }\r\n  | {\r\n      status: QueryStatus.pending\r\n      isUninitialized: false\r\n      isLoading: true\r\n      isSuccess: false\r\n      isError: false\r\n    }\r\n  | {\r\n      status: QueryStatus.fulfilled\r\n      isUninitialized: false\r\n      isLoading: false\r\n      isSuccess: true\r\n      isError: false\r\n    }\r\n  | {\r\n      status: QueryStatus.rejected\r\n      isUninitialized: false\r\n      isLoading: false\r\n      isSuccess: false\r\n      isError: true\r\n    }\r\n\r\nexport function getRequestStatusFlags(status: QueryStatus): RequestStatusFlags {\r\n  return {\r\n    status,\r\n    isUninitialized: status === QueryStatus.uninitialized,\r\n    isLoading: status === QueryStatus.pending,\r\n    isSuccess: status === QueryStatus.fulfilled,\r\n    isError: status === QueryStatus.rejected,\r\n  } as any\r\n}\r\n\r\nexport type SubscriptionOptions = {\r\n  /**\r\n   * How frequently to automatically re-fetch data (in milliseconds). Defaults to `0` (off).\r\n   */\r\n  pollingInterval?: number\r\n  /**\r\n   * Defaults to `false`. This setting allows you to control whether RTK Query will try to refetch all subscribed queries after regaining a network connection.\r\n   *\r\n   * If you specify this option alongside `skip: true`, this **will not be evaluated** until `skip` is false.\r\n   *\r\n   * Note: requires [`setupListeners`](./setupListeners) to have been called.\r\n   */\r\n  refetchOnReconnect?: boolean\r\n  /**\r\n   * Defaults to `false`. This setting allows you to control whether RTK Query will try to refetch all subscribed queries after the application window regains focus.\r\n   *\r\n   * If you specify this option alongside `skip: true`, this **will not be evaluated** until `skip` is false.\r\n   *\r\n   * Note: requires [`setupListeners`](./setupListeners) to have been called.\r\n   */\r\n  refetchOnFocus?: boolean\r\n}\r\nexport type Subscribers = { [requestId: string]: SubscriptionOptions }\r\nexport type QueryKeys<Definitions extends EndpointDefinitions> = {\r\n  [K in keyof Definitions]: Definitions[K] extends QueryDefinition<\r\n    any,\r\n    any,\r\n    any,\r\n    any\r\n  >\r\n    ? K\r\n    : never\r\n}[keyof Definitions]\r\nexport type MutationKeys<Definitions extends EndpointDefinitions> = {\r\n  [K in keyof Definitions]: Definitions[K] extends MutationDefinition<\r\n    any,\r\n    any,\r\n    any,\r\n    any\r\n  >\r\n    ? K\r\n    : never\r\n}[keyof Definitions]\r\n\r\ntype BaseQuerySubState<D extends BaseEndpointDefinition<any, any, any>> = {\r\n  /**\r\n   * The argument originally passed into the hook or `initiate` action call\r\n   */\r\n  originalArgs: QueryArgFrom<D>\r\n  /**\r\n   * A unique ID associated with the request\r\n   */\r\n  requestId: string\r\n  /**\r\n   * The received data from the query\r\n   */\r\n  data?: ResultTypeFrom<D>\r\n  /**\r\n   * The received error if applicable\r\n   */\r\n  error?:\r\n    | SerializedError\r\n    | (D extends QueryDefinition<any, infer BaseQuery, any, any>\r\n        ? BaseQueryError<BaseQuery>\r\n        : never)\r\n  /**\r\n   * The name of the endpoint associated with the query\r\n   */\r\n  endpointName: string\r\n  /**\r\n   * Time that the latest query started\r\n   */\r\n  startedTimeStamp: number\r\n  /**\r\n   * Time that the latest query was fulfilled\r\n   */\r\n  fulfilledTimeStamp?: number\r\n}\r\n\r\nexport type QuerySubState<D extends BaseEndpointDefinition<any, any, any>> = Id<\r\n  | ({\r\n      status: QueryStatus.fulfilled\r\n    } & WithRequiredProp<\r\n      BaseQuerySubState<D>,\r\n      'data' | 'fulfilledTimeStamp'\r\n    > & { error: undefined })\r\n  | ({\r\n      status: QueryStatus.pending\r\n    } & BaseQuerySubState<D>)\r\n  | ({\r\n      status: QueryStatus.rejected\r\n    } & WithRequiredProp<BaseQuerySubState<D>, 'error'>)\r\n  | {\r\n      status: QueryStatus.uninitialized\r\n      originalArgs?: undefined\r\n      data?: undefined\r\n      error?: undefined\r\n      requestId?: undefined\r\n      endpointName?: string\r\n      startedTimeStamp?: undefined\r\n      fulfilledTimeStamp?: undefined\r\n    }\r\n>\r\n\r\ntype BaseMutationSubState<D extends BaseEndpointDefinition<any, any, any>> = {\r\n  requestId: string\r\n  data?: ResultTypeFrom<D>\r\n  error?:\r\n    | SerializedError\r\n    | (D extends MutationDefinition<any, infer BaseQuery, any, any>\r\n        ? BaseQueryError<BaseQuery>\r\n        : never)\r\n  endpointName: string\r\n  startedTimeStamp: number\r\n  fulfilledTimeStamp?: number\r\n}\r\n\r\nexport type MutationSubState<D extends BaseEndpointDefinition<any, any, any>> =\r\n  | (({\r\n      status: QueryStatus.fulfilled\r\n    } & WithRequiredProp<\r\n      BaseMutationSubState<D>,\r\n      'data' | 'fulfilledTimeStamp'\r\n    >) & { error: undefined })\r\n  | (({\r\n      status: QueryStatus.pending\r\n    } & BaseMutationSubState<D>) & { data?: undefined })\r\n  | ({\r\n      status: QueryStatus.rejected\r\n    } & WithRequiredProp<BaseMutationSubState<D>, 'error'>)\r\n  | {\r\n      requestId?: undefined\r\n      status: QueryStatus.uninitialized\r\n      data?: undefined\r\n      error?: undefined\r\n      endpointName?: string\r\n      startedTimeStamp?: undefined\r\n      fulfilledTimeStamp?: undefined\r\n    }\r\n\r\nexport type CombinedState<\r\n  D extends EndpointDefinitions,\r\n  E extends string,\r\n  ReducerPath extends string\r\n> = {\r\n  queries: QueryState<D>\r\n  mutations: MutationState<D>\r\n  provided: InvalidationState<E>\r\n  subscriptions: SubscriptionState\r\n  config: ConfigState<ReducerPath>\r\n}\r\n\r\nexport type InvalidationState<TagTypes extends string> = {\r\n  [_ in TagTypes]: {\r\n    [id: string]: Array<QueryCacheKey>\r\n    [id: number]: Array<QueryCacheKey>\r\n  }\r\n}\r\n\r\nexport type QueryState<D extends EndpointDefinitions> = {\r\n  [queryCacheKey: string]: QuerySubState<D[string]> | undefined\r\n}\r\n\r\nexport type SubscriptionState = {\r\n  [queryCacheKey: string]: Subscribers | undefined\r\n}\r\n\r\nexport type ConfigState<ReducerPath> = RefetchConfigOptions & {\r\n  reducerPath: ReducerPath\r\n  online: boolean\r\n  focused: boolean\r\n  middlewareRegistered: boolean | 'conflict'\r\n} & ModifiableConfigState\r\n\r\nexport type ModifiableConfigState = {\r\n  keepUnusedDataFor: number\r\n} & RefetchConfigOptions\r\n\r\nexport type MutationState<D extends EndpointDefinitions> = {\r\n  [requestId: string]: MutationSubState<D[string]> | undefined\r\n}\r\n\r\nexport type RootState<\r\n  Definitions extends EndpointDefinitions,\r\n  TagTypes extends string,\r\n  ReducerPath extends string\r\n> = {\r\n  [P in ReducerPath]: CombinedState<Definitions, TagTypes, P>\r\n}\r\n","export { QueryStatus } from './core/apiState'\r\nexport type { Api, Module, ApiModules } from './apiTypes'\r\nexport type {\r\n  BaseQueryApi,\r\n  BaseQueryEnhancer,\r\n  BaseQueryFn,\r\n} from '.